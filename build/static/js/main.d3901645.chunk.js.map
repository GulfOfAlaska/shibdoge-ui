{"version":3,"sources":["hooks/useInterval.ts","constants/contractAddress.ts","assets/doge-win.mp4","assets/shiba-win.mp4","components/Battle.tsx","components/ConnectSample.tsx","components/Claim.tsx","components/SendDeposit.tsx","components/Withdraw.tsx","components/ChooseSideButton.tsx","assets/shiba-logo.png","assets/doge-logo.png","components/QuerySample.tsx","assets/OverTheHills.mp4","index.tsx"],"names":["useInterval","callback","delay","savedCallback","useRef","useLayoutEffect","current","useEffect","id","setInterval","clearInterval","contractAddress","Battle","connectedWallet","useConnectedWallet","dogeScore","setDogeScore","useState","shibaScore","setShibaScore","lcd","useMemo","LCDClient","URL","network","chainID","async","getSide","side","wasm","contractQuery","err","console","error","dogeTotalAmount","total_amount","BigNumber","shibaTotalAmount","winningSide","lt","log","style","height","position","display","justifyContent","width","autoPlay","muted","loop","objectFit","src","shibaWin","type","dogeWin","ConnectSample","status","wallets","availableConnectTypes","availableInstallTypes","connect","install","disconnect","useWallet","bank","setBank","balance","setBalance","coinList","walletAddress","toArray","balanceRes","address","terraAddress","toString","queryBalance","WalletStatus","WALLET_NOT_CONNECTED","map","connectType","className","onClick","ConnectType","CHROME_EXTENSION","WALLET_CONNECTED","marginRight","color","fontSize","shiftedBy","Claim","props","txResult","setTxResult","txError","setTxError","chosenSide","unclaimedMessage","sendDeposit","useCallback","execute","MsgExecuteContract","deposit","amount","post","msgs","then","nextTxResult","catch","UserDenied","CreateTxFailed","message","TxFailed","Timeout","TxUnspecifiedError","Error","String","alignItems","marginLeft","marginBottom","SendDeposit","depositAmount","setDepositAmount","availablePost","value","onChange","event","target","textAlign","right","top","cursor","Withdraw","withdrawAmount","setWithdrawAmount","staked","withdraw","sendWithdraw","ChooseSideButton","label","sendChoice","QuerySample","setChosenSide","remainingTimeSec","setRemainingTimeSec","lastRoundWinners","setLastRoundWinners","pendingRewards","setPendingRewards","lastChangeSide","setLastChangeSide","getLastRound","last_round","stake","getChosenSide","last_round_winners","getLastRoundWinners","pendingRewardsRes","pending_rewards","getPendingRewards","lastChangeSideRes","last_change_side","getLastChangeSide","lastRound","blockInfo","tendermint","currentBlockheight","block","header","block_height","secondsBetweenRounds","parseInt","minus","lte","set","ROUNDING_MODE","minutes","div","seconds","mod","isNegative","remainingTimeText","isNaN","toFixed","selectedSide","dogeTotalAmountStr","shibaTotalAmountStr","stakedAmountStr","current_winning_count","spacingStyle","isLastChangeSide","hasStake","isZero","balanceStr","flexDirection","border","marginTop","lineHeight","round_winners","slice","winner","index","size","background","DogeLogo","backgroundSize","ShibLogo","App","playing","setPlaying","player","Audio","OverTheHills","volume","play","pause","getChainOptions","chainOptions","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d3901645.chunk.js","sourcesContent":["import { useEffect, useLayoutEffect, useRef } from 'react'\n\nfunction useInterval(callback: () => void, delay: number | null) {\n  const savedCallback = useRef(callback)\n\n  // Remember the latest callback if it changes.\n  useLayoutEffect(() => {\n    savedCallback.current = callback\n  }, [callback])\n\n  // Set up the interval.\n  useEffect(() => {\n    // Don't schedule if no delay is specified.\n    if (!delay) {\n      return\n    }\n\n    const id = setInterval(() => savedCallback.current(), delay)\n\n    return () => clearInterval(id)\n  }, [delay])\n}\n\nexport default useInterval","export const contractAddress = 'terra1s4ydu30zknkujf7l0rk566fn0ptdsn6ma4m2t3'","export default __webpack_public_path__ + \"static/media/doge-win.b83f3638.mp4\";","export default __webpack_public_path__ + \"static/media/shiba-win.31878def.mp4\";","import { LCDClient, MsgExecuteContract, MsgSend, StdFee } from '@terra-money/terra.js';\nimport {\n  CreateTxFailed,\n  Timeout,\n  TxFailed,\n  TxResult,\n  TxUnspecifiedError,\n  useConnectedWallet,\n  UserDenied,\n} from '@terra-money/wallet-provider';\nimport { useCallback, useMemo, useState } from 'react';\nimport './componentStyle.css'\nimport useInterval from 'hooks/useInterval';\nimport { SideResponse } from './QuerySample';\nimport { contractAddress } from 'constants/contractAddress';\nimport BigNumber from 'bignumber.js';\nimport fight from '../assets/fight.mp4';\nimport dogeWin from '../assets/doge-win.mp4';\nimport shibaWin from '../assets/shiba-win.mp4';\n\nexport function Battle() {\n\n  const connectedWallet = useConnectedWallet();\n  const [dogeScore, setDogeScore] = useState<null | SideResponse>();\n  const [shibaScore, setShibaScore] = useState<null | SideResponse>();\n\n  const lcd = useMemo(() => {\n    if (!connectedWallet) {\n      return null;\n    }\n\n    return new LCDClient({\n      URL: connectedWallet.network.lcd,\n      chainID: connectedWallet.network.chainID,\n    });\n  }, [connectedWallet]);\n\n  async function getSide(side: number): Promise<SideResponse | undefined> {\n    return lcd?.wasm.contractQuery(\n      contractAddress,\n      { side: { side } }\n    )\n  }\n\n  useInterval(\n    async () => {\n      try {\n        const dogeScore: SideResponse | undefined = await getSide(1)\n        setDogeScore(dogeScore)\n        const shibaScore: SideResponse | undefined = await getSide(2)\n        setShibaScore(shibaScore)\n      } catch (err) {\n        console.error(err)\n      }\n\n    },\n    3000,\n  )\n\n  const dogeTotalAmount = dogeScore?.side?.total_amount ? new BigNumber(dogeScore?.side?.total_amount) : new BigNumber(0)\n  const shibaTotalAmount = shibaScore?.side?.total_amount ? new BigNumber(shibaScore?.side?.total_amount) : new BigNumber(0)\n  const winningSide = dogeTotalAmount.lt(shibaTotalAmount) ? 1 : 2\n\n  console.log(winningSide === 2)\n\n  useInterval(\n    async () => {\n      try {\n        const dogeScore: SideResponse | undefined = await getSide(1)\n        setDogeScore(dogeScore)\n        const shibaScore: SideResponse | undefined = await getSide(2)\n        setShibaScore(shibaScore)\n      } catch (err) {\n        console.error(err)\n      }\n\n    },\n    3000,\n  )\n\n  return (\n    <div style={\n      { height: '100%', position: 'relative', display: 'flex', justifyContent: 'space-between' }\n    }>\n      {/* DOGE */}\n      {/* <div className='container' style={{ height: '100%', width: '100%', background: `url(${battle}) no-repeat`, backgroundSize: '100% 100%', }}> */}\n      <div style={{ height: '100%', width: '100%' }}>\n        {\n          winningSide === 2 &&\n          <video autoPlay muted loop width='100%' height='100%' style={{ objectFit: 'fill' }}>\n            <source src={shibaWin} type=\"video/mp4\" />\n          </video>\n        }\n        {\n          winningSide !== 2 &&\n          <video autoPlay muted loop width='100%' height='100%' style={{ objectFit: 'fill' }}>\n            <source src={dogeWin} type=\"video/mp4\" />\n          </video>\n        }\n        {/* <div className='doge-pict-container' style={{ right: '1rem' }} /> */}\n        {/* {connectedWallet?.availablePost && !txResult && !txError && (\n          <div className='button-container' style={{ right: '.5rem' }}>\n            <ChooseSideButton label={'Choose Doge'} side={1} />\n          </div>\n        )} */}\n        {/* {!connectedWallet && <p>Wallet not connected!</p>} */}\n      </div>\n\n      {/* SHIBA */}\n      {/* <div className='container' style={{ height: '100%', width: '49.5%', background: `url(${battleground2}) no-repeat`, backgroundSize: 'cover', }}>\n        <div className='shiba-pict-container' style={{ right: '1rem' }} /> */}\n      {/* {connectedWallet?.availablePost && !txResult && !txError && (\n          <div className='button-container' style={{ left: '.5rem' }}>\n            <ChooseSideButton label={'Choose Shib'} side={2} />\n          </div>\n        )} */}\n      {/* {!connectedWallet && <p>Wallet not connected!</p>} */}\n      {/* </div> */}\n    </div>\n  );\n}\n","import { Coin, Coins, LCDClient } from '@terra-money/terra.js';\nimport { ConnectType, useConnectedWallet, useWallet, WalletStatus } from '@terra-money/wallet-provider';\nimport BigNumber from 'bignumber.js';\nimport { contractAddress } from 'constants/contractAddress';\nimport useInterval from 'hooks/useInterval';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport './componentStyle.css'\n\nexport interface Balance {\n  balance: string\n}\n\nexport function ConnectSample() {\n  const {\n    status,\n    network,\n    wallets,\n    availableConnectTypes,\n    availableInstallTypes,\n    connect,\n    install,\n    disconnect,\n  } = useWallet();\n  const connectedWallet = useConnectedWallet();\n  const [bank, setBank] = useState<null | Coin[]>();\n  const [balance, setBalance] = useState<null | any>();\n\n  const lcd = useMemo(() => {\n    if (!connectedWallet) {\n      return null;\n    }\n\n    return new LCDClient({\n      URL: connectedWallet.network.lcd,\n      chainID: connectedWallet.network.chainID,\n    });\n  }, [connectedWallet]);\n\n  async function queryBalance(): Promise<Balance | undefined> {\n    return lcd?.wasm.contractQuery(\n      contractAddress,\n      { balance: { address: connectedWallet?.terraAddress.toString() } }\n    )\n  }\n\n  useInterval(\n    async () => {\n      if (connectedWallet && lcd) {\n        const bankRes = await lcd.bank.balance(connectedWallet.walletAddress)\n        const coinList = bankRes.toArray()\n        setBank(coinList);\n\n        const balanceRes: Balance | undefined = await queryBalance()\n        setBalance(balanceRes?.balance);\n      } else {\n        setBank(null);\n      }\n    }, 3000);\n\n\n  return (\n    <div style={{ display: 'flex' }}>\n      {status === WalletStatus.WALLET_NOT_CONNECTED && (\n        <>\n          {availableInstallTypes.map((connectType) => (\n            <button\n              className='button'\n              key={'install-' + connectType}\n              onClick={() => install(connectType)}\n            >\n              Install {connectType}\n            </button>\n          ))}\n          <div className='button'\n            onClick={() => connect(ConnectType.CHROME_EXTENSION)}\n          >\n            Connect\n          </div>\n        </>\n      )}\n      {status === WalletStatus.WALLET_CONNECTED && (\n        <div style={{ marginRight: '0.5rem', color: 'white' }}>\n          <div style={{ fontSize: '.8vw' }}>{wallets[0]['terraAddress']}</div>\n          {\n            balance && <span style={{ fontSize: '.8vw' }}>{`dogeshib: ${new BigNumber(balance).shiftedBy(-6).toString()}`}</span>\n          }\n        </div>\n      )}\n      {status === WalletStatus.WALLET_CONNECTED && (\n        <div className='button' onClick={() => disconnect()}>Disconnect</div>\n      )}\n    </div>\n  );\n}\n","import { MsgExecuteContract, MsgSend, StdFee } from '@terra-money/terra.js';\nimport {\n  CreateTxFailed,\n  Timeout,\n  TxFailed,\n  TxResult,\n  TxUnspecifiedError,\n  useConnectedWallet,\n  UserDenied,\n} from '@terra-money/wallet-provider';\nimport { contractAddress } from 'constants/contractAddress';\nimport { useCallback, useState } from 'react';\nimport './componentStyle.css'\n\ninterface Props {\n  chosenSide: number,\n  unclaimedMessage: string\n}\n\nexport function Claim(props: Props) {\n  const [txResult, setTxResult] = useState<TxResult | null>(null);\n  const [txError, setTxError] = useState<string | null>(null);\n  const connectedWallet = useConnectedWallet();\n  const { chosenSide, unclaimedMessage } = props\n\n  const sendDeposit = useCallback(() => {\n    if (!connectedWallet) {\n      return;\n    }\n\n    setTxResult(null);\n    setTxError(null);\n\n    const execute = new MsgExecuteContract(\n      connectedWallet.terraAddress,\n      contractAddress,\n      { deposit: { amount: '0' } }\n    );\n\n    connectedWallet\n      .post({\n        msgs: [execute],\n      })\n      .then((nextTxResult: TxResult) => {\n        setTxResult(nextTxResult);\n      })\n      .catch((error: unknown) => {\n        if (error instanceof UserDenied) {\n          setTxError('User Denied');\n        } else if (error instanceof CreateTxFailed) {\n          setTxError('Create Tx Failed: ' + error.message);\n        } else if (error instanceof TxFailed) {\n          setTxError('Tx Failed: ' + error.message);\n        } else if (error instanceof Timeout) {\n          setTxError('Timeout');\n        } else if (error instanceof TxUnspecifiedError) {\n          setTxError('Unspecified Error: ' + error.message);\n        } else {\n          setTxError(\n            'Unknown Error: ' +\n            (error instanceof Error ? error.message : String(error)),\n          );\n        }\n      });\n  }, [connectedWallet]);\n\n  return (\n    <div>\n      <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n        <div className='button' onClick={() => sendDeposit()}>Claim</div>\n        <div className='text' style={{ marginLeft: '1rem', marginBottom: '0' }}>{unclaimedMessage}</div>\n      </div>\n      {txError}\n    </div>\n  );\n}\n","import { MsgExecuteContract, MsgSend, StdFee } from '@terra-money/terra.js';\nimport {\n  CreateTxFailed,\n  Timeout,\n  TxFailed,\n  TxResult,\n  TxUnspecifiedError,\n  useConnectedWallet,\n  UserDenied,\n} from '@terra-money/wallet-provider';\nimport BigNumber from 'bignumber.js';\nimport { contractAddress } from 'constants/contractAddress';\nimport { useCallback, useState } from 'react';\nimport './componentStyle.css'\n\ninterface Props {\n  chosenSide: number,\n  balance: string\n}\n\nexport function SendDeposit(props: Props) {\n  const [txResult, setTxResult] = useState<TxResult | null>(null);\n  const [txError, setTxError] = useState<string | null>(null);\n  const [depositAmount, setDepositAmount] = useState<string>('');\n  const connectedWallet = useConnectedWallet();\n\n  const { chosenSide, balance } = props\n\n  const sendDeposit = async () => {\n    if (!connectedWallet) {\n      return;\n    }\n\n    setTxResult(null);\n\n    const side = chosenSide || 1\n\n    const execute = new MsgExecuteContract(\n      connectedWallet.terraAddress,\n      contractAddress,\n      { deposit: { amount: new BigNumber(depositAmount).shiftedBy(6).toString() } }\n    );\n\n    connectedWallet\n      .post({\n        msgs: [execute],\n      })\n      .then((nextTxResult: TxResult) => {\n        setTxResult(nextTxResult);\n      })\n      .catch((error: unknown) => {\n        if (error instanceof UserDenied) {\n          setTxError('User Denied');\n        } else if (error instanceof CreateTxFailed) {\n          setTxError('Create Tx Failed: ' + error.message);\n        } else if (error instanceof TxFailed) {\n          setTxError('Tx Failed: ' + error.message);\n        } else if (error instanceof Timeout) {\n          setTxError('Timeout');\n        } else if (error instanceof TxUnspecifiedError) {\n          setTxError('Unspecified Error: ' + error.message);\n        } else {\n          setTxError(\n            'Unknown Error: ' +\n            (error instanceof Error ? error.message : String(error)),\n          );\n        }\n      });\n  }\n\n  return (\n    <div>\n      {connectedWallet?.availablePost && (\n        <div style={{ display: 'flex', alignItems: 'center' }}>\n          <div className='button' onClick={() => sendDeposit()}>Deposit</div>\n          <div style={{ position: 'relative' }}>\n            <input className=\"retro-input\" value={depositAmount} onChange={(event) => { setDepositAmount(event.target.value) }} />\n            {\n              balance &&\n              <div style={{ marginLeft: '1vw', fontSize: '.2vw', textAlign: 'right', position: 'absolute', right: '.5vw', top: '-.8vw', cursor: 'pointer' }} onClick={() => { setDepositAmount(balance) }}>{`max: ${balance}`}</div>\n            }\n          </div>\n          {txError}\n        </div>\n      )}\n      {/* {!connectedWallet && <p>Wallet not connected!</p>} */}\n    </div>\n  );\n}\n","import { MsgExecuteContract, MsgSend, StdFee } from '@terra-money/terra.js';\nimport {\n  CreateTxFailed,\n  Timeout,\n  TxFailed,\n  TxResult,\n  TxUnspecifiedError,\n  useConnectedWallet,\n  UserDenied,\n} from '@terra-money/wallet-provider';\nimport BigNumber from 'bignumber.js';\nimport { contractAddress } from 'constants/contractAddress';\nimport { useCallback, useState } from 'react';\nimport './componentStyle.css'\n\ninterface Props {\n  staked: string\n}\n\nexport function Withdraw(props: Props) {\n  const [txResult, setTxResult] = useState<TxResult | null>(null);\n  const [txError, setTxError] = useState<string | null>(null);\n  const [withdrawAmount, setWithdrawAmount] = useState<string>('');\n\n  const connectedWallet = useConnectedWallet();\n\n  const { staked } = props\n\n  const sendWithdraw = async () => {\n    if (!connectedWallet) {\n      return;\n    }\n\n    setTxResult(null);\n    setTxError(null);\n\n    const execute = new MsgExecuteContract(\n      connectedWallet.terraAddress,\n      contractAddress,\n      { withdraw: { amount: new BigNumber(withdrawAmount).shiftedBy(6).toString() } }\n    );\n\n    connectedWallet\n      .post({\n        msgs: [execute],\n      })\n      .then((nextTxResult: TxResult) => {\n        setTxResult(nextTxResult);\n      })\n      .catch((error: unknown) => {\n        if (error instanceof UserDenied) {\n          setTxError('User Denied');\n        } else if (error instanceof CreateTxFailed) {\n          setTxError('Create Tx Failed: ' + error.message);\n        } else if (error instanceof TxFailed) {\n          setTxError('Tx Failed: ' + error.message);\n        } else if (error instanceof Timeout) {\n          setTxError('Timeout');\n        } else if (error instanceof TxUnspecifiedError) {\n          setTxError('Unspecified Error: ' + error.message);\n        } else {\n          setTxError(\n            'Unknown Error: ' +\n            (error instanceof Error ? error.message : String(error)),\n          );\n        }\n      });\n  };\n\n  return (\n    <div>\n      <div style={{ display: 'flex', alignItems: 'center' }}>\n        <div className='button' onClick={() => sendWithdraw()}>Withdraw</div>\n        <div style={{ position: 'relative' }}>\n          <input className=\"retro-input\" value={withdrawAmount} onChange={(event) => { setWithdrawAmount(event.target.value) }} />\n          {\n            staked &&\n            <div style={{ marginLeft: '1vw', fontSize: '.2vw', textAlign: 'right', position: 'absolute', right: '.5vw', top: '-.8vw', cursor: 'pointer' }} onClick={() => { setWithdrawAmount(staked) }}>{`max: ${staked}`}</div>\n          }\n        </div>\n        {txError}\n      </div>\n      {/* {!connectedWallet && <p>Wallet not connected!</p>} */}\n    </div>\n  );\n}\n","import { MsgExecuteContract, MsgSend, StdFee } from '@terra-money/terra.js';\nimport {\n  CreateTxFailed,\n  Timeout,\n  TxFailed,\n  TxResult,\n  TxUnspecifiedError,\n  useConnectedWallet,\n  UserDenied,\n} from '@terra-money/wallet-provider';\nimport { contractAddress } from 'constants/contractAddress';\nimport { useCallback, useState } from 'react';\nimport './componentStyle.css'\n\ninterface Props {\n  label: String,\n  side: number\n}\n\nexport function ChooseSideButton(props: Props) {\n  const [txResult, setTxResult] = useState<TxResult | null>(null);\n  const [txError, setTxError] = useState<string | null>(null);\n\n  const { label, side } = props\n\n  const connectedWallet = useConnectedWallet();\n\n  const sendChoice = async() => {\n    if (!connectedWallet) {\n      return;\n    }\n\n    setTxResult(null);\n\n    const execute = new MsgExecuteContract(\n      connectedWallet.terraAddress,\n      contractAddress,\n      { side: { side } }\n    );\n\n    connectedWallet\n      .post({\n        msgs: [execute],\n      })\n      .then((nextTxResult: TxResult) => {\n        setTxResult(nextTxResult);\n      })\n      .catch((error: unknown) => {\n        if (error instanceof UserDenied) {\n          setTxError('User Denied');\n        } else if (error instanceof CreateTxFailed) {\n          setTxError('Create Tx Failed: ' + error.message);\n        } else if (error instanceof TxFailed) {\n          setTxError('Tx Failed: ' + error.message);\n        } else if (error instanceof Timeout) {\n          setTxError('Timeout');\n        } else if (error instanceof TxUnspecifiedError) {\n          setTxError('Unspecified Error: ' + error.message);\n        } else {\n          setTxError(\n            'Unknown Error: ' +\n            (error instanceof Error ? error.message : String(error)),\n          );\n        }\n      });\n  };\n\n  return (\n    <div>\n      {connectedWallet?.availablePost && !txResult && !txError && (\n        <div className='button' onClick={() => sendChoice()}>{label}</div>\n      )}\n      {txError}\n    </div>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/shiba-logo.ab75a889.png\";","export default __webpack_public_path__ + \"static/media/doge-logo.74da373a.png\";","import { LCDClient, TreasuryAPI } from '@terra-money/terra.js';\nimport { TxResult, useConnectedWallet } from '@terra-money/wallet-provider';\nimport { contractAddress } from 'constants/contractAddress';\nimport useInterval from 'hooks/useInterval';\nimport { useEffect, useMemo, useState } from 'react';\nimport { Claim } from './Claim';\nimport './componentStyle.css'\nimport { SendDeposit } from './SendDeposit';\nimport { Withdraw } from './Withdraw';\nimport './componentStyle.css'\nimport BigNumber from 'bignumber.js';\nimport { ChooseSideButton } from './ChooseSideButton';\nimport ShibLogo from 'assets/shiba-logo.png'\nimport DogeLogo from 'assets/doge-logo.png'\nimport { Balance } from './ConnectSample';\n\nexport interface SideResponse {\n  side: {\n    current_winning_count: number,\n    total_amount: number\n  }\n}\n\ninterface StakeResponse {\n  stake: {\n    amount: string,\n    last_claimed_at: number,\n    last_claimed_winning_count: number,\n    reward_unclaimed: string,\n    side: number\n  }\n}\n\ninterface LastRoundResponse {\n  last_round: {\n    block_height: number,\n    round: number\n  }\n}\n\ninterface LastRoundWinnersResponse {\n  round_winners: number[]\n}\n\ninterface PendingRewardsResponse {\n  pending_rewards: string\n}\n\ninterface lastChangeSideResponse {\n  last_change_side: string\n}\n\nexport function QuerySample() {\n  const connectedWallet = useConnectedWallet();\n\n  const [chosenSide, setChosenSide] = useState<null | StakeResponse>();\n  const [dogeScore, setDogeScore] = useState<null | SideResponse>();\n  const [shibaScore, setShibaScore] = useState<null | SideResponse>();\n  const [remainingTimeSec, setRemainingTimeSec] = useState<null | BigNumber>();\n  const [lastRoundWinners, setLastRoundWinners] = useState<null | LastRoundWinnersResponse>();\n  const [pendingRewards, setPendingRewards] = useState<null | PendingRewardsResponse>();\n  const [lastChangeSide, setLastChangeSide] = useState<null | lastChangeSideResponse>();\n  const [balance, setBalance] = useState<null | any>();\n\n  const lcd = useMemo(() => {\n    if (!connectedWallet) {\n      return null;\n    }\n\n    return new LCDClient({\n      URL: connectedWallet.network.lcd,\n      chainID: connectedWallet.network.chainID,\n    });\n  }, [connectedWallet]);\n\n  async function queryBalance(): Promise<Balance | undefined> {\n    return lcd?.wasm.contractQuery(\n      contractAddress,\n      { balance: { address: connectedWallet?.terraAddress.toString() } }\n    )\n  }\n\n  useInterval(\n    async () => {\n      if (connectedWallet && lcd) {\n\n        const balanceRes: Balance | undefined = await queryBalance()\n        setBalance(balanceRes?.balance);\n      } else {\n        setBalance(null);\n      }\n    }, 3000);\n\n  async function getChosenSide(address: string): Promise<StakeResponse | undefined> {\n    return lcd?.wasm.contractQuery(\n      contractAddress,\n      { stake: { address } }\n    )\n  }\n\n  async function getSide(side: number): Promise<SideResponse | undefined> {\n    return lcd?.wasm.contractQuery(\n      contractAddress,\n      { side: { side } }\n    )\n  }\n\n  async function getLastRound(): Promise<LastRoundResponse | undefined> {\n    return lcd?.wasm.contractQuery(\n      contractAddress,\n      { last_round: {} }\n    )\n  }\n\n  async function getLastRoundWinners(): Promise<LastRoundWinnersResponse | undefined> {\n    return lcd?.wasm.contractQuery(\n      contractAddress,\n      { last_round_winners: {} }\n    )\n  }\n\n  async function getPendingRewards(address: string): Promise<PendingRewardsResponse | undefined> {\n    return lcd?.wasm.contractQuery(\n      contractAddress,\n      { pending_rewards: { address } }\n    )\n  }\n\n  async function getLastChangeSide(): Promise<lastChangeSideResponse | undefined> {\n    return lcd?.wasm.contractQuery(\n      contractAddress,\n      { last_change_side: {} }\n    )\n  }\n\n  useInterval(\n    async () => {\n      try {\n        if (!connectedWallet?.terraAddress) return\n        const side = (await getChosenSide(connectedWallet?.terraAddress.toString()))\n        setChosenSide(side)\n      } catch (err) {\n        console.error(err)\n      }\n    },\n    3000,\n  )\n\n  useInterval(\n    async () => {\n      try {\n        const dogeScore: SideResponse | undefined = await getSide(1)\n        setDogeScore(dogeScore)\n        const shibaScore: SideResponse | undefined = await getSide(2)\n        setShibaScore(shibaScore)\n      } catch (err) {\n        console.error(err)\n      }\n\n    },\n    3000,\n  )\n\n  useInterval(\n    async () => {\n      try {\n        const lastRoundWinners: LastRoundWinnersResponse | undefined = await getLastRoundWinners()\n        setLastRoundWinners(lastRoundWinners)\n      } catch (err) {\n        console.error(err)\n      }\n\n    },\n    3000,\n  )\n\n  useInterval(\n    async () => {\n      try {\n        if (!connectedWallet?.terraAddress) return\n        const pendingRewardsRes: PendingRewardsResponse | undefined = await getPendingRewards(connectedWallet?.terraAddress.toString())\n        setPendingRewards(pendingRewardsRes)\n      } catch (err) {\n        console.error(err)\n      }\n\n    },\n    3000,\n  )\n\n  useInterval(\n    async () => {\n      try {\n        if (!connectedWallet?.terraAddress) return\n        const lastChangeSideRes: lastChangeSideResponse | undefined = await getLastChangeSide()\n        setLastChangeSide(lastChangeSideRes)\n      } catch (err) {\n        console.error(err)\n      }\n\n    },\n    3000,\n  )\n\n  // Timer\n\n  useInterval(\n    async () => {\n      try {\n        const lastRound: LastRoundResponse | undefined = await getLastRound()\n        const blockInfo = await lcd?.tendermint.blockInfo()\n        const currentBlockheight = blockInfo?.block?.header?.height\n        if (lastRound?.last_round?.block_height && currentBlockheight) {\n          const blocksBetweenRounds = parseInt(currentBlockheight) - lastRound?.last_round?.block_height\n          const secondsBetweenRounds = blocksBetweenRounds * 5\n          setRemainingTimeSec(secondsBetweenRounds ? new BigNumber(60).minus(secondsBetweenRounds) : null)\n        }\n      } catch (err) {\n        console.error(err)\n      }\n    }, 30000\n  )\n\n  useInterval(\n    async () => {\n      try {\n        if (!remainingTimeSec) {\n\n          const lastRound: LastRoundResponse | undefined = await getLastRound()\n          const blockInfo = await lcd?.tendermint.blockInfo()\n          const currentBlockheight = blockInfo?.block?.header?.height\n          if (lastRound?.last_round?.block_height && currentBlockheight) {\n            const blocksBetweenRounds = parseInt(currentBlockheight) - lastRound?.last_round?.block_height\n            const secondsBetweenRounds = blocksBetweenRounds * 5\n            setRemainingTimeSec(secondsBetweenRounds ? new BigNumber(60).minus(secondsBetweenRounds) : null)\n          }\n        } else if (remainingTimeSec.lte(0)) {\n          setRemainingTimeSec(new BigNumber(60))\n        } else {\n          setRemainingTimeSec(remainingTimeSec.minus(1))\n        }\n      } catch (err) {\n        console.error(err)\n      }\n    }, 1000\n  )\n\n  BigNumber.set({ ROUNDING_MODE: 3 })\n  let minutes = remainingTimeSec ? remainingTimeSec?.div(new BigNumber(60)) : null\n  let seconds = minutes ? remainingTimeSec?.mod(new BigNumber(60)) : null\n  minutes = minutes?.isNegative() ? new BigNumber(0) : minutes\n  seconds = seconds?.isNegative() ? new BigNumber(0) : seconds\n  const remainingTimeText = (minutes && seconds && !minutes.isNaN() && !seconds.isNaN()) ? `${minutes.toFixed(0)}m : ${seconds.toFixed(0)}s` : '-'\n\n  const selectedSide = chosenSide?.stake?.side\n\n  const dogeTotalAmountStr = dogeScore?.side?.total_amount ? new BigNumber(dogeScore?.side?.total_amount).shiftedBy(-6).toString() : '-'\n  const shibaTotalAmountStr = shibaScore?.side?.total_amount ? new BigNumber(shibaScore?.side?.total_amount).shiftedBy(-6).toString() : '-'\n  const dogeWinningCountStr = dogeScore?.side?.current_winning_count ? new BigNumber(dogeScore?.side?.current_winning_count).toString() : '-'\n  const shibaWinningCountStr = shibaScore?.side?.current_winning_count ? new BigNumber(shibaScore?.side?.current_winning_count).toString() : '-'\n  const stakedAmountStr = chosenSide?.stake.amount ? new BigNumber(chosenSide?.stake.amount).shiftedBy(-6).toString() : '-'\n\n  const spacingStyle = { marginBottom: '.6vw' }\n\n  const dogeTotalAmount = dogeScore?.side?.total_amount ? new BigNumber(dogeScore?.side?.total_amount) : new BigNumber(0)\n  const shibaTotalAmount = shibaScore?.side?.total_amount ? new BigNumber(shibaScore?.side?.total_amount) : new BigNumber(0)\n\n  const winningSide = dogeTotalAmount.lt(shibaTotalAmount) ? 1 : 2\n\n  const isLastChangeSide = lastChangeSide?.last_change_side === connectedWallet?.terraAddress.toString()\n\n  const hasStake = chosenSide?.stake.amount && !new BigNumber(chosenSide?.stake.amount).isZero()\n\n  const balanceStr = new BigNumber(balance).shiftedBy(-6).toString()\n\n  return (\n    <div style={{ height: '100%', textAlign: 'left' }}>\n      <div className='container' style={{ height: '100%', display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n\n        <div className='shining-text' style={{ textAlign: 'center' }}>\n          {\n            lastChangeSide && lastChangeSide?.last_change_side !== 'empty' ?\n              `* ${isLastChangeSide ? 'Your are the last to switch sides!' : `${lastChangeSide?.last_change_side} is the last to deposit!`} Win 10000000 dogeshib by being last to switch sides!!!`\n              :\n              '* Win 10000000 dogeshib by being last to switch sides!!!'\n          }\n        </div>\n        <div style={{ height: '100%', display: 'flex', justifyContent: 'space-between', width: '100%' }}>\n          <div className='container' style={{ height: '100%', width: '33%', border: '3px brown solid', flexDirection: 'column' }}>\n            <div style={{ textAlign: 'center', ...spacingStyle }}>\n              <h2 className='text'>\n                <span className='blinking-text'>{hasStake && selectedSide === 1 ? '[SELECTED]' : ''}</span>\n                {` DOGE `}\n                {winningSide === 1 && <span className='shining-text'>(Currently Winning)</span>}\n              </h2>\n            </div>\n            <div className='text' style={{ marginTop: '1rem', ...spacingStyle }}>Total Stakes: {dogeTotalAmountStr}</div>\n            {hasStake && selectedSide && selectedSide !== 1 && <div style={spacingStyle}>{<ChooseSideButton label={'Choose Doge'} side={1} />}</div>}\n            {hasStake && selectedSide && selectedSide !== 1 && <div className='text' style={spacingStyle}>* Side with lesser stakes wins</div>}\n          </div>\n          <div className='container' style={{ height: '100%', width: '33%', border: '3px brown solid', flexDirection: 'column', alignItems: 'flex-start' }}>\n            <div className='text' style={spacingStyle}>{`Time left: ${remainingTimeText}`}</div>\n            <div style={{ display: 'flex', ...spacingStyle, alignItems: 'center' }}>\n              <div className='text' style={{ lineHeight: '1vw', marginBottom: '0' }}>Previous winners: </div>\n              <div style={{ display: 'flex', alignItems: 'center' }}>\n                {\n                  lastRoundWinners?.round_winners.slice(0, 5).map((winner, index) => {\n                    const size = index === 0 ? '1.3vw' : '.8vw'\n                    if (winner === 1) return <div key={`winner-${index}`} style={{ background: `url(${DogeLogo}) no-repeat`, backgroundSize: 'cover', width: size, height: size, marginLeft: '.3vw' }} />\n                    if (winner === 2) return <div key={`winner-${index}`} style={{ background: `url(${ShibLogo}) no-repeat`, backgroundSize: 'cover', width: size, height: size, marginLeft: '.3vw' }} />\n                    return <div />\n                  })\n                }\n              </div>\n            </div>\n            <div className='text' style={{ display: 'flex', alignItems: 'center', ...spacingStyle }}>{`Your stake: ${stakedAmountStr} `}{\n              selectedSide === 1 ? 'Doge' : 'Shiba'\n              // ? <div style={{ background: `url(${DogeLogo}) no-repeat`, backgroundSize: 'cover', width: '.8vw', height: '.8vw', marginLeft: '.5vw' }} />\n              // : <div style={{ background: `url(${ShibLogo}) no-repeat`, backgroundSize: 'cover', width: '.8vw', height: '.8vw', marginLeft: '.5vw' }} />\n            }</div>\n            <div className='text' style={{marginBottom: '1vw'}}><SendDeposit balance={balanceStr} chosenSide={selectedSide ?? 0} /></div>\n            {hasStake && selectedSide && <div className='text' style={spacingStyle}><Withdraw staked={stakedAmountStr} /></div> }\n            <div style={spacingStyle}><Claim chosenSide={selectedSide ?? 0} unclaimedMessage={`${new BigNumber(pendingRewards?.pending_rewards || 0).shiftedBy(-6).toString()} dogeshib`} /></div>\n          </div>\n          <div className='container' style={{ height: '100%', width: '33%', border: '3px brown solid', flexDirection: 'column' }}>\n            <div style={{ textAlign: 'center', ...spacingStyle }}>\n              <h2 className='text'>\n                <span className='blinking-text'>{hasStake && selectedSide === 2 ? '[SELECTED]' : ''}</span>\n                {` SHIBA `}\n                {winningSide === 2 && <span className='shining-text'>(Currently Winning)</span>}\n              </h2>\n            </div>\n            <div className='text' style={{ marginTop: '1rem', ...spacingStyle }}>Total Stakes: {shibaTotalAmountStr}</div>\n            {hasStake && selectedSide && selectedSide !== 2 && <div style={spacingStyle}>{<ChooseSideButton label={'Choose Shiba'} side={2} />}</div>}\n            {hasStake && selectedSide && selectedSide !== 2 && <div className='text' style={spacingStyle}>* Side with lesser stakes wins</div>}\n          </div>\n        </div>\n      </div >\n    </div >\n  );\n}\n","export default __webpack_public_path__ + \"static/media/OverTheHills.c1084af6.mp4\";","import { getChainOptions, WalletProvider } from '@terra-money/wallet-provider';\nimport { Battle } from 'components/Battle';\nimport { ConnectSample } from 'components/ConnectSample';\nimport { QuerySample } from 'components/QuerySample';\nimport { contractAddress } from 'constants/contractAddress';\nimport ReactDOM from 'react-dom';\nimport './style.css';\nimport './components/componentStyle.css';\nimport OverTheHills from 'assets/OverTheHills.mp4'\nimport { useEffect, useState } from 'react';\n\nfunction App() {\n\n  const [playing, setPlaying] = useState(true);\n  const player = new Audio(OverTheHills)\n  useEffect(() => {\n    player.volume = 0.5;\n    playing ? player.play() : player.pause();\n    return () => player.pause()\n  }, []);\n\n  function togglePlay() {\n    // Using the callback version of `setState` so you always\n    // toggle based on the latest state\n    if (playing) {\n      player.pause()\n    } else {\n      player.volume = 0.5;\n      player.play()\n    }\n    setPlaying(!playing);\n  }\n\n  return (\n    <main className='main-container'>\n      <div className='battle-container'>\n        <div className='header'>\n          <button className='button' onClick={() => togglePlay()}>Music</button>\n          <ConnectSample />\n        </div>\n        <div style={{ height: '50%', width: '100%' }}>\n          <Battle />\n        </div>\n        <div style={{ height: '40%', width: '100%', marginTop: '1rem' }}>\n          <QuerySample />\n        </div>\n        {/* <SignSample /> */}\n        <div style={{ color: 'white', fontSize: '.8vw', textAlign: 'right', marginTop: '1vw' }}>{`contract address: ${contractAddress}`}</div>\n      </div>\n    </main>\n  );\n}\n\ngetChainOptions().then((chainOptions) => {\n  ReactDOM.render(\n    <WalletProvider {...chainOptions}>\n      <App />\n    </WalletProvider>,\n    document.getElementById('root'),\n  );\n});\n"],"sourceRoot":""}