{"version":3,"sources":["components/ConnectSample.tsx","components/QuerySample.tsx","components/SignSample.tsx","components/TxSample.tsx","index.tsx"],"names":["ConnectSample","status","network","wallets","availableConnectTypes","availableInstallTypes","connect","install","disconnect","useWallet","JSON","stringify","WalletStatus","WALLET_NOT_CONNECTED","map","connectType","onClick","WALLET_CONNECTED","QuerySample","connectedWallet","useConnectedWallet","bank","setBank","useState","lcd","useMemo","LCDClient","URL","chainID","useEffect","balance","walletAddress","then","coins","toString","toAddress","SignSample","signResult","setSignResult","txResult","setTxResult","txError","setTxError","send","useCallback","startsWith","alert","sign","fee","StdFee","msgs","MsgSend","uusd","nextSignResult","signature","public_key","stdSignMsgData","result","sig","StdSignature","fromData","pub_key","stdSignMsg","StdSignMsg","tx","broadcastSync","StdTx","memo","nextTxResult","catch","error","UserDenied","CreateTxFailed","message","TxFailed","Timeout","TxUnspecifiedError","Error","String","availableSign","href","txhash","target","rel","TxSample","post","console","log","availablePost","App","style","margin","display","flexDirection","gap","getChainOptions","chainOptions","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.01372cb4.chunk.js","sourcesContent":["import { useWallet, WalletStatus } from '@terra-money/wallet-provider';\nimport React from 'react';\n\nexport function ConnectSample() {\n  const {\n    status,\n    network,\n    wallets,\n    availableConnectTypes,\n    availableInstallTypes,\n    connect,\n    install,\n    disconnect,\n  } = useWallet();\n\n  return (\n    <div>\n      <h1>Connect Sample</h1>\n      <section>\n        <pre>\n          {JSON.stringify(\n            {\n              status,\n              network,\n              wallets,\n              availableConnectTypes,\n              availableInstallTypes,\n            },\n            null,\n            2,\n          )}\n        </pre>\n      </section>\n\n      <footer>\n        {status === WalletStatus.WALLET_NOT_CONNECTED && (\n          <>\n            {availableInstallTypes.map((connectType) => (\n              <button\n                key={'install-' + connectType}\n                onClick={() => install(connectType)}\n              >\n                Install {connectType}\n              </button>\n            ))}\n            {availableConnectTypes.map((connectType) => (\n              <button\n                key={'connect-' + connectType}\n                onClick={() => connect(connectType)}\n              >\n                Connect {connectType}\n              </button>\n            ))}\n          </>\n        )}\n        {status === WalletStatus.WALLET_CONNECTED && (\n          <button onClick={() => disconnect()}>Disconnect</button>\n        )}\n      </footer>\n    </div>\n  );\n}\n","import { LCDClient } from '@terra-money/terra.js';\nimport { useConnectedWallet } from '@terra-money/wallet-provider';\nimport React, { useEffect, useMemo, useState } from 'react';\n\nexport function QuerySample() {\n  const connectedWallet = useConnectedWallet();\n\n  const [bank, setBank] = useState<null | string>();\n\n  const lcd = useMemo(() => {\n    if (!connectedWallet) {\n      return null;\n    }\n\n    return new LCDClient({\n      URL: connectedWallet.network.lcd,\n      chainID: connectedWallet.network.chainID,\n    });\n  }, [connectedWallet]);\n\n  useEffect(() => {\n    if (connectedWallet && lcd) {\n      lcd.bank.balance(connectedWallet.walletAddress).then((coins) => {\n        setBank(coins.toString());\n      });\n    } else {\n      setBank(null);\n    }\n  }, [connectedWallet, lcd]);\n\n  return (\n    <div>\n      <h1>Query Sample</h1>\n      {bank && <pre>{bank}</pre>}\n      {!connectedWallet && <p>Wallet not connected!</p>}\n    </div>\n  );\n}\n","import {\n  LCDClient,\n  MsgSend,\n  StdFee,\n  StdSignature,\n  StdSignMsg,\n  StdTx,\n  SyncTxBroadcastResult,\n} from '@terra-money/terra.js';\nimport {\n  CreateTxFailed,\n  SignResult,\n  Timeout,\n  TxFailed,\n  TxUnspecifiedError,\n  useConnectedWallet,\n  UserDenied,\n} from '@terra-money/wallet-provider';\nimport React, { useCallback, useState } from 'react';\n\nconst toAddress = 'terra12hnhh5vtyg5juqnzm43970nh4fw42pt27nw9g9';\n\nexport function SignSample() {\n  const [signResult, setSignResult] = useState<SignResult | null>(null);\n  const [txResult, setTxResult] = useState<SyncTxBroadcastResult | null>(null);\n  const [txError, setTxError] = useState<string | null>(null);\n\n  const connectedWallet = useConnectedWallet();\n\n  const send = useCallback(() => {\n    if (!connectedWallet) {\n      return;\n    }\n\n    if (connectedWallet.network.chainID.startsWith('columbus')) {\n      alert(`Please only execute this example on Testnet`);\n      return;\n    }\n\n    setSignResult(null);\n\n    connectedWallet\n      .sign({\n        fee: new StdFee(1000000, '200000uusd'),\n        msgs: [\n          new MsgSend(connectedWallet.walletAddress, toAddress, {\n            uusd: 1000000,\n          }),\n        ],\n      })\n      .then((nextSignResult: SignResult) => {\n        setSignResult(nextSignResult);\n\n        // broadcast\n        const { signature, public_key, stdSignMsgData } = nextSignResult.result;\n\n        const sig = StdSignature.fromData({\n          signature,\n          pub_key: public_key,\n        });\n\n        const stdSignMsg = StdSignMsg.fromData(stdSignMsgData);\n\n        const lcd = new LCDClient({\n          chainID: connectedWallet.network.chainID,\n          URL: connectedWallet.network.lcd,\n        });\n\n        return lcd.tx.broadcastSync(\n          new StdTx(stdSignMsg.msgs, stdSignMsg.fee, [sig], stdSignMsg.memo),\n        );\n      })\n      .then((nextTxResult: SyncTxBroadcastResult) => {\n        setTxResult(nextTxResult);\n      })\n      .catch((error: unknown) => {\n        if (error instanceof UserDenied) {\n          setTxError('User Denied');\n        } else if (error instanceof CreateTxFailed) {\n          setTxError('Create Tx Failed: ' + error.message);\n        } else if (error instanceof TxFailed) {\n          setTxError('Tx Failed: ' + error.message);\n        } else if (error instanceof Timeout) {\n          setTxError('Timeout');\n        } else if (error instanceof TxUnspecifiedError) {\n          setTxError('Unspecified Error: ' + error.message);\n        } else {\n          setTxError(\n            'Unknown Error: ' +\n              (error instanceof Error ? error.message : String(error)),\n          );\n        }\n      });\n  }, [connectedWallet]);\n\n  return (\n    <div>\n      <h1>Sign Sample</h1>\n      {connectedWallet?.availableSign && !signResult && !txError && (\n        <button onClick={() => send()}>Send 1USD to {toAddress}</button>\n      )}\n      {signResult && (\n        <>\n          <pre>{JSON.stringify(signResult, null, 2)}</pre>\n          {txResult && <pre>{JSON.stringify(txResult, null, 2)}</pre>}\n          {connectedWallet && txResult && (\n            <a\n              href={`https://finder.terra.money/${connectedWallet.network.chainID}/tx/${txResult.txhash}`}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              Open Tx Result in Terra Finder\n            </a>\n          )}\n          <button onClick={() => setSignResult(null)}>Clear Result</button>\n        </>\n      )}\n      {txError && (\n        <>\n          <pre>{txError}</pre>\n          <button onClick={() => setTxError(null)}>Clear Error</button>\n        </>\n      )}\n      {!connectedWallet && <p>Wallet not connected!</p>}\n      {connectedWallet && !connectedWallet.availableSign && (\n        <p>Can not sign Tx</p>\n      )}\n    </div>\n  );\n}\n","import { MsgSend, StdFee } from '@terra-money/terra.js';\nimport {\n  CreateTxFailed,\n  Timeout,\n  TxFailed,\n  TxResult,\n  TxUnspecifiedError,\n  useConnectedWallet,\n  UserDenied,\n} from '@terra-money/wallet-provider';\nimport React, { useCallback, useState } from 'react';\n\nconst toAddress = 'terra12hnhh5vtyg5juqnzm43970nh4fw42pt27nw9g9';\n\nexport function TxSample() {\n  const [txResult, setTxResult] = useState<TxResult | null>(null);\n  const [txError, setTxError] = useState<string | null>(null);\n\n  const connectedWallet = useConnectedWallet();\n\n  const send = useCallback(() => {\n    if (!connectedWallet) {\n      return;\n    }\n\n    if (connectedWallet.network.chainID.startsWith('columbus')) {\n      alert(`Please only execute this example on Testnet`);\n      return;\n    }\n\n    setTxResult(null);\n\n    connectedWallet\n      .post({\n        fee: new StdFee(1000000, '200000uusd'),\n        msgs: [\n          new MsgSend(connectedWallet.walletAddress, toAddress, {\n            uusd: 1000000,\n          }),\n        ],\n      })\n      .then((nextTxResult: TxResult) => {\n        console.log(nextTxResult);\n        setTxResult(nextTxResult);\n      })\n      .catch((error: unknown) => {\n        if (error instanceof UserDenied) {\n          setTxError('User Denied');\n        } else if (error instanceof CreateTxFailed) {\n          setTxError('Create Tx Failed: ' + error.message);\n        } else if (error instanceof TxFailed) {\n          setTxError('Tx Failed: ' + error.message);\n        } else if (error instanceof Timeout) {\n          setTxError('Timeout');\n        } else if (error instanceof TxUnspecifiedError) {\n          setTxError('Unspecified Error: ' + error.message);\n        } else {\n          setTxError(\n            'Unknown Error: ' +\n              (error instanceof Error ? error.message : String(error)),\n          );\n        }\n      });\n  }, [connectedWallet]);\n\n  return (\n    <div>\n      <h1>Tx Sample</h1>\n      {connectedWallet?.availablePost && !txResult && !txError && (\n        <button onClick={send}>Send 1USD to {toAddress}</button>\n      )}\n      {txResult && (\n        <>\n          <pre>{JSON.stringify(txResult, null, 2)}</pre>\n          <button onClick={() => setTxResult(null)}>Clear Tx Result</button>\n        </>\n      )}\n      {txError && (\n        <>\n          <pre>{txError}</pre>\n          <button onClick={() => setTxError(null)}>Clear Tx Error</button>\n        </>\n      )}\n      {!connectedWallet && <p>Wallet not connected!</p>}\n      {connectedWallet && !connectedWallet.availablePost && (\n        <p>Can not post Tx</p>\n      )}\n    </div>\n  );\n}\n","import { getChainOptions, WalletProvider } from '@terra-money/wallet-provider';\nimport { ConnectSample } from 'components/ConnectSample';\nimport { QuerySample } from 'components/QuerySample';\nimport { SignSample } from 'components/SignSample';\nimport { TxSample } from 'components/TxSample';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css';\n\nfunction App() {\n  return (\n    <main\n      style={{ margin: 20, display: 'flex', flexDirection: 'column', gap: 40 }}\n    >\n      <ConnectSample />\n      <QuerySample />\n      <TxSample />\n      <SignSample />\n    </main>\n  );\n}\n\ngetChainOptions().then((chainOptions) => {\n  ReactDOM.render(\n    <WalletProvider {...chainOptions}>\n      <App />\n    </WalletProvider>,\n    document.getElementById('root'),\n  );\n});\n"],"sourceRoot":""}